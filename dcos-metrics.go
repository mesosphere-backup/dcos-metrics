// Copyright 2016 Mesosphere, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"crypto/tls"
	"flag"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"reflect"
	"strings"
	"time"

	log "github.com/Sirupsen/logrus"
	yaml "gopkg.in/yaml.v2"

	"github.com/dcos/dcos-go/dcos"
	"github.com/dcos/dcos-go/dcos/nodeutil"
	"github.com/dcos/dcos-go/jwt/transport"
	"github.com/dcos/dcos-metrics/collector"
	"github.com/dcos/dcos-metrics/producers"
	httpProducer "github.com/dcos/dcos-metrics/producers/http"
	//kafkaProducer "github.com/dcos/dcos-metrics/producers/kafka"
	//statsdProducer "github.com/dcos/dcos-metrics/producers/statsd"
	"github.com/dcos/dcos-metrics/util"
)

var (
	// VERSION set by $(git describe --always)
	// Set by scripts/build.sh, executed by `make build`
	VERSION = "unset"
	// REVISION set by $(git rev-parse --shore HEAD)
	// Set by scripts/build.sh, executed by `make build`
	REVISION = "unset"
)

// Config defines the top-level configuration options for the dcos-metrics-collector project.
// It is (currently) broken up into two main sections: collectors and producers.
type Config struct {
	// Config from the service config file
	Collector     CollectorConfig `yaml:"collector"`
	Producers     ProducersConfig `yaml:"producers"`
	IAMConfigPath string          `yaml:"iam_config_path"`
	VersionFlag   bool

	// Generated by dcos.NodeInfo{}
	MesosID   string
	IPAddress string
	ClusterID string

	// Flag configuration
	DCOSRole   string
	ConfigPath string
	LogLevel   string
}

// CollectorConfig contains configuration options relevant to the "collector"
// portion of this project. That is, the code responsible for querying Mesos,
// et. al to gather metrics and send them to a "producer".
type CollectorConfig struct {
	HTTPProfiler  bool   `yaml:"http_profiler"`
	IPCommand     string `yaml:"ip_command"`
	PollingPeriod int    `yaml:"polling_period"`

	MasterConfig collector.MasterConfig `yaml:"master_config,omitempty"`
	AgentConfig  collector.AgentConfig  `yaml:"agent_config,omitempty"`
}

// ProducersConfig contains references to other structs that provide individual producer configs.
// The configuration for all producers is then located in their corresponding packages.
//
// For example: Config.Producers.KafkaProducerConfig references kafkaProducer.Config. This struct
// contains an optional Kafka configuration. This configuration is available in the source file
// 'producers/kafka/kafka.go'. It is then the responsibility of the individual producers to
// validate the configuration the user has provided and panic if necessary.
type ProducersConfig struct {
	HTTPProducerConfig httpProducer.Config `yaml:"http,omitempty"`
	//KafkaProducerConfig  kafkaProducer.Config  `yaml:"kafka,omitempty"`
	//StatsdProducerConfig statsdProducer.Config `yaml:"statsd,omitempty"`
}

func main() {
	// Get configuration
	cfg, err := getNewConfig(os.Args[1:])
	if err != nil {
		log.Fatal(err)
		os.Exit(1)
	}
	if cfg.VersionFlag {
		fmt.Printf("DC/OS Metrics Service\nVersion: %s\nRevsision: %s\n\r", VERSION, REVISION)
		os.Exit(0)
	}

	// Set logging level
	lvl, err := log.ParseLevel(cfg.LogLevel)
	if err != nil {
		log.Fatal(err)
		os.Exit(1)
	}
	log.SetLevel(lvl)

	// HTTP profiling
	if cfg.Collector.HTTPProfiler {
		log.Info("HTTP profiling enabled")
		go util.RunHTTPProfAccess()
	}

	var producerChans []chan<- producers.MetricsMessage

	// HTTP producer
	if producerIsConfigured("http", cfg) {
		log.Info("HTTP producer enabled")
		c := httpProducer.Config{
			Port:        cfg.Producers.HTTPProducerConfig.Port,
			DCOSRole:    cfg.DCOSRole,
			CacheExpiry: time.Duration(cfg.Collector.PollingPeriod) * time.Second * 2,
		}
		hp, httpProducerChan := httpProducer.New(c)
		producerChans = append(producerChans, httpProducerChan)
		go hp.Run()
	}

	// Host-level Metrics Collector
	nodeCollectorChan := make(chan producers.MetricsMessage)
	frameworkCollectorChan := make(chan *collector.AvroDatum)

	log.Info("Agent polling enabled")

	host, err := collector.NewDCOSHost(
		cfg.DCOSRole,
		cfg.IPAddress,
		cfg.MesosID,
		cfg.ClusterID,
		cfg.Collector.AgentConfig.Port,
		time.Duration(cfg.Collector.PollingPeriod)*time.Second, nodeCollectorChan)

	if err != nil {
		log.Fatal(err.Error())
	}

	go host.RunPoller()

	go collector.RunFrameworkTCPListener(frameworkCollectorChan)

	// Broadcast (many-to-many) messages from the collector to the various producers.
	for {
		select {
		case frameworkMessage := <-frameworkCollectorChan:
			pmm, err := frameworkMessage.Transform(cfg.MesosID, cfg.ClusterID, cfg.IPAddress)
			if err != nil {
				log.Error(err)
			}
			for _, producer := range producerChans {
				producer <- pmm
			}
		case agentMessage := <-nodeCollectorChan:
			for _, producer := range producerChans {
				producer <- agentMessage
			}
		}
	}
}

func (c *Config) setFlags(fs *flag.FlagSet) {
	fs.StringVar(&c.ConfigPath, "config", c.ConfigPath, "The path to the config file.")
	fs.StringVar(&c.LogLevel, "loglevel", c.LogLevel, "Logging level (default: info). Must be one of: debug, info, warn, error, fatal, panic.")
	fs.StringVar(&c.DCOSRole, "role", c.DCOSRole, "The DC/OS role this instance runs on.")
	fs.BoolVar(&c.VersionFlag, "version", c.VersionFlag, "Print version and revsion then exit")
}

func (c *Config) loadConfig() error {
	fileByte, err := ioutil.ReadFile(c.ConfigPath)
	if err != nil {
		return err
	}

	if err = yaml.Unmarshal(fileByte, &c); err != nil {
		return err
	}

	return nil
}

func (c *Config) getNodeInfo() error {
	// Create a DC/OS transport
	client := &http.Client{
		Transport: &http.Transport{
			TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
		},
	}
	// If IAM config path is set, use it to generate a new
	// round tripper for JWT stuff
	if len(c.IAMConfigPath) != 0 {
		rt, err := transport.NewRoundTripper(
			client.Transport,
			transport.OptionReadIAMConfig(c.IAMConfigPath))
		if err != nil {
			log.Fatal(err)
		}
		client.Transport = rt
	}

	// Get NodeInfo
	nodeInfo, err := nodeutil.NewNodeInfo(client)
	if err != nil {
		return err
	}

	ip, err := nodeInfo.DetectIP()
	if err != nil {
		return err
	}
	c.IPAddress = ip.String()

	id, err := nodeInfo.MesosID(nil)
	if err != nil {
		c.MesosID = ""
	} else {
		c.MesosID = id
	}

	if c.DCOSRole == dcos.RoleMaster {
		cid, err := nodeInfo.ClusterID()
		if err != nil {
			return err
		}
		c.ClusterID = cid
	}
	return nil
}

// newConfig establishes our default, base configuration.
func newConfig() Config {
	return Config{
		Collector: CollectorConfig{
			HTTPProfiler:  true,
			IPCommand:     "/opt/mesosphere/bin/detect_ip",
			PollingPeriod: 15,
			MasterConfig: collector.MasterConfig{
				Port: 5050,
			},
			AgentConfig: collector.AgentConfig{
				Port: 5051,
			},
		},
		Producers: ProducersConfig{
			HTTPProducerConfig: httpProducer.Config{
				Port: 8000,
			},
		},
		ConfigPath: "dcos-metrics-config.yaml",
		LogLevel:   "info",
	}
}

// getNewConfig loads the configuration and sets precedence of configuration values.
// For example: command line flags override values provided in the config file.
func getNewConfig(args []string) (Config, error) {
	c := newConfig()
	thisFlagSet := flag.NewFlagSet("", flag.ExitOnError)
	c.setFlags(thisFlagSet)
	// Override default config with CLI flags if any
	if err := thisFlagSet.Parse(args); err != nil {
		fmt.Println("Errors encountered parsing flags.")
		return c, err
	}

	if err := c.loadConfig(); err != nil {
		return c, err
	}

	// Note: .getNodeInfo() is last so we are sure we have all the
	// configuration we need from flags and config file to make
	// this run correctly.
	if err := c.getNodeInfo(); err != nil {
		return c, err
	}

	return c, nil
}

// producerIsConfigured analyzes the ProducersConfig struct and determines if
// configuration exists for a given producer by name (i.e., is the "http"
// producer configured?). If a configuration exists, this function will return
// true, as a configured producer is an enabled one.
func producerIsConfigured(name string, cfg Config) bool {
	s := reflect.ValueOf(cfg.Producers)
	cfgType := s.Type()
	for i := 0; i < s.NumField(); i++ {
		if strings.Split(cfgType.Field(i).Tag.Get("yaml"), ",")[0] == name {
			return true
		}
	}
	return false
}
